from browser import document, ajax, window
import json


def by_id(el_id):
    return document.getElementById(el_id)


# ---------- utils ----------
def js_to_py(obj, default=None):
    # Deep convert a JS object/array into Python dict/list via JSON
    try:
        return json.loads(window.JSON.stringify(obj))
    except Exception:
        return default


def parse_error(err):
    try:
        e = js_to_py(err, default=err)
        if isinstance(e, dict):
            # Our reject format: {"status": xxx, "text": "...json..."}
            if "text" in e and e["text"]:
                try:
                    body = json.loads(e["text"])
                    if isinstance(body, dict) and "detail" in body:
                        d = body["detail"]
                        return d if isinstance(d, str) else json.dumps(d)
                    return e["text"]
                except Exception:
                    return e["text"]
            if "error" in e and e["error"]:
                return str(e["error"])
            return json.dumps(e)
        if isinstance(e, str):
            return e
        return window.JSON.stringify(err)
    except Exception:
        return "Unknown error"


def err_status(err):
    try:
        e = js_to_py(err, default={})
        if isinstance(e, dict) and "status" in e:
            return int(e["status"])
    except Exception:
        pass
    return None


def fmt_price(val):
    try:
        if val is None or val == "":
            return ""
        n = float(val)
        return f"{n:.2f}"
    except Exception:
        return str(val)


def getv(o, key, default=None):
    # Read attr from both Python dict and JS object
    try:
        if isinstance(o, dict):
            return o.get(key, default)
    except Exception:
        pass
    try:
        v = o[key]
        return v if v is not None else default
    except Exception:
        pass
    try:
        v = getattr(o, key)
        return v if v is not None else default
    except Exception:
        return default


# ---------- XHR ----------
def api_get(path, with_auth=False):
    def _send(resolve, reject):
        req = ajax.Ajax()
        req.open("GET", path, True)
        req.with_credentials = True
        if with_auth:
            token = window.sessionStorage.getItem("access_token")
            if token:
                req.set_header("Authorization", f"Bearer {token}")

        def on_complete(ev):
            try:
                if 200 <= req.status < 300:
                    data = json.loads(req.text) if req.text else []
                    resolve(data)
                else:
                    reject({"status": req.status, "text": req.text})
            except Exception as e:
                reject({"status": req.status, "error": str(e)})

        req.bind("complete", on_complete)
        req.send()
    return window.Promise.new(_send)


def api_post(path, data, with_auth=False):
    def _send(resolve, reject):
        req = ajax.Ajax()
        req.open("POST", path, True)
        req.with_credentials = True
        req.set_header("Content-Type", "application/json")
        if with_auth:
            token = window.sessionStorage.getItem("access_token")
            if token:
                req.set_header("Authorization", f"Bearer {token}")

        def on_complete(ev):
            try:
                if 200 <= req.status < 300:
                    data = json.loads(req.text) if req.text else {}
                    resolve(data)
                else:
                    reject({"status": req.status, "text": req.text})
            except Exception as e:
                reject({"status": req.status, "error": str(e)})

        req.bind("complete", on_complete)
        req.send(json.dumps(data))
    return window.Promise.new(_send)


def api_delete(path, with_auth=False):
    def _send(resolve, reject):
        req = ajax.Ajax()
        req.open("DELETE", path, True)
        req.with_credentials = True
        if with_auth:
            token = window.sessionStorage.getItem("access_token")
            if token:
                req.set_header("Authorization", f"Bearer {token}")

        def on_complete(ev):
            try:
                if req.status == 204 or (200 <= req.status < 300):
                    resolve({})
                else:
                    reject({"status": req.status, "text": req.text})
            except Exception as e:
                reject({"status": req.status, "error": str(e)})

        req.bind("complete", on_complete)
        req.send()
    return window.Promise.new(_send)


def refresh_access_token():
    # Returns Promise; on success stores new access_token into sessionStorage
    def _send(resolve, reject):
        req = ajax.Ajax()
        req.open("POST", "/auth/refresh", True)
        req.with_credentials = True
        req.set_header("Content-Type", "application/json")

        def on_complete(ev):
            try:
                if 200 <= req.status < 300:
                    data = json.loads(req.text) if req.text else {}
                    token = data.get("access_token")
                    if token:
                        window.sessionStorage.setItem("access_token", token)
                        resolve(True)
                        return
                reject(False)
            except Exception:
                reject(False)

        req.bind("complete", on_complete)
        req.send("{}")
    return window.Promise.new(_send)


def with_auth_retry(do_call):
    # Retries once after refresh when 401
    return do_call().then(
        lambda resp: window.Promise.resolve(resp),
        lambda err: (
            refresh_access_token().then(
                lambda ok: do_call() if ok else window.Promise.reject(err),
                lambda _no: window.Promise.reject(err),
            )
            if err_status(err) == 401 else window.Promise.reject(err)
        ),
    )


# ---------- UI building ----------
def make_product_card(p):
    pid = getv(p, "id")
    title = (str(getv(p, "title") or "(no title)")).strip()
    price = fmt_price(getv(p, "price"))
    currency = (str(getv(p, "currency") or "")).strip()
    desc = (str(getv(p, "description") or "—")).strip()
    img = getv(p, "image_url") or "/static/img/placeholder.svg"

    card = window.document.createElement("div")
    card.setAttribute("class", "product-card")
    if pid is not None:
        card.setAttribute("data-id", str(pid))

    thumb = window.document.createElement("div")
    thumb.setAttribute("class", "product-thumb")
    img_el = window.document.createElement("img")
    img_el.setAttribute("src", img)
    img_el.setAttribute("alt", title or "image")
    img_el.setAttribute("onerror", "this.onerror=null;this.src='/static/img/placeholder.svg';")
    thumb.appendChild(img_el)

    body = window.document.createElement("div")
    body.setAttribute("class", "product-body")

    h3 = window.document.createElement("h3")
    h3.setAttribute("class", "product-title")
    h3.innerText = title

    meta = window.document.createElement("div")
    meta.setAttribute("class", "product-meta")

    row_price = window.document.createElement("div")
    row_price.setAttribute("class", "meta-row")
    lab_price = window.document.createElement("span")
    lab_price.setAttribute("class", "meta-label")
    lab_price.innerText = "Price:"
    val_price = window.document.createElement("span")
    val_price.setAttribute("class", "meta-value")
    val_price.innerText = (price + (" " + currency if currency else "")) if price else "—"
    row_price.appendChild(lab_price)
    row_price.appendChild(val_price)

    row_desc = window.document.createElement("div")
    row_desc.setAttribute("class", "meta-row")
    lab_desc = window.document.createElement("span")
    lab_desc.setAttribute("class", "meta-label")
    lab_desc.innerText = "Description:"
    val_desc = window.document.createElement("span")
    val_desc.setAttribute("class", "meta-value")
    val_desc.innerText = desc
    row_desc.appendChild(lab_desc)
    row_desc.appendChild(val_desc)

    actions = window.document.createElement("div")
    actions.setAttribute("class", "product-actions")
    btn_del = window.document.createElement("button")
    btn_del.setAttribute("class", "btn danger btn-delete")
    if pid is not None:
        btn_del.setAttribute("data-id", str(pid))
    btn_del.innerText = "Delete"
    actions.appendChild(btn_del)

    meta.appendChild(row_price)
    meta.appendChild(row_desc)
    body.appendChild(h3)
    body.appendChild(meta)
    body.appendChild(actions)

    card.appendChild(thumb)
    card.appendChild(body)
    return card


def attach_delete_handlers(container):
    buttons = container.select(".btn-delete")
    for btn in buttons:
        if btn.getAttribute("data-bound") == "1":
            continue
        btn.setAttribute("data-bound", "1")

        def _handler(ev, el=btn):
            ev.preventDefault()
            pid = el.getAttribute("data-id")

            def ok(_):
                card = el.closest(".product-card")
                if card and card.parentNode:
                    card.parentNode.removeChild(card)

            def fail(err):
                msg = by_id("products-msg")
                if msg:
                    msg.text = f"Delete failed: {parse_error(err)}"
                    msg.class_name = "msg err"

            with_auth_retry(lambda: api_delete(f"/api/products/{pid}", with_auth=True)).then(ok, fail)

        btn.bind("click", _handler)


def render_products(items):
    root = by_id("products-list")
    if root is None:
        return

    while root.firstChild:
        root.removeChild(root.firstChild)

    # items could be a JS Array; iterate by length if needed
    try:
        length = len(items)
    except Exception:
        try:
            length = int(getv(items, "length", 0))
        except Exception:
            length = 0

    if length == 0:
        root.text = "No products yet."
        return

    for i in range(length):
        try:
            it = items[i]
        except Exception:
            it = items[i] if isinstance(items, list) else None
        if it is None:
            continue
        card = make_product_card(it)
        root.appendChild(card)

    attach_delete_handlers(root)


def load_products():
    def ok(resp):
        render_products(resp)

    def fail(err):
        msg = by_id("products-msg")
        if msg:
            msg.text = f"Failed to load products: {parse_error(err)}"
            msg.class_name = "msg err"

    api_get("/api/products").then(ok, fail)


# ---------- create form ----------
def on_new_product_submit(ev):
    ev.preventDefault()
    form = by_id("product-new-form")
    # prevent double submit
    if form.getAttribute("data-busy") == "1":
        return
    form.setAttribute("data-busy", "1")

    # disable button
    btns = form.select("button[type=submit]") if hasattr(form, "select") else []
    btn = btns[0] if btns and len(btns) > 0 else None
    old_text = btn.innerText if btn else None
    if btn:
        btn.disabled = True
        btn.innerText = "Creating..."

    title = by_id("prod-title").value
    desc = by_id("prod-desc").value
    price = by_id("prod-price").value
    currency = by_id("prod-currency").value
    image = by_id("prod-image").value
    payload = {
        "title": title,
        "description": desc,
        "price": float(price) if price else 0.0,
        "currency": currency or "USD",
        "image_url": image or None,
    }

    def cleanup():
        form.setAttribute("data-busy", "0")
        if btn:
            btn.disabled = False
            btn.innerText = old_text or "Create"

    def ok(_resp):
        cleanup()
        window.location.assign("/products")

    def fail(err):
        cleanup()
        msg = by_id("product-new-msg")
        if msg:
            msg.text = f"Create failed: {parse_error(err)}"
            msg.class_name = "msg err"

    with_auth_retry(lambda: api_post("/api/products", payload, with_auth=True)).then(ok, fail)


def bind():
    if by_id("products-list") is not None:
        load_products()

    form = by_id("product-new-form")
    if form is not None:
        if form.getAttribute("data-bound") != "1":
            form.setAttribute("data-bound", "1")
            form.bind("submit", on_new_product_submit)


bind()