from browser import window, ajax
import json


def get_token():
    try:
        return window.sessionStorage.getItem("access_token")
    except Exception:
        return None


def set_token(t):
    try:
        if t:
            window.sessionStorage.setItem("access_token", t)
    except Exception:
        pass


def api_get_json(path, token=None):
    def _send(resolve, reject):
        req = ajax.Ajax()
        req.open("GET", path, True)
        req.with_credentials = True
        if token:
            req.set_header("Authorization", f"Bearer {token}")

        def on_complete(ev):
            try:
                status = req.status
                if 200 <= status < 300:
                    data = json.loads(req.text) if req.text else {}
                    resolve({"status": status, "body": data})
                else:
                    reject({"status": status, "text": req.text})
            except Exception as e:
                reject({"status": req.status, "error": str(e)})

        req.bind("complete", on_complete)
        req.send()

    return window.Promise.new(_send)


def api_post_json(path, body: dict, with_credentials=False):
    def _send(resolve, reject):
        req = ajax.Ajax()
        req.open("POST", path, True)
        req.with_credentials = bool(with_credentials)
        req.set_header("Content-Type", "application/json")

        def on_complete(ev):
            try:
                status = req.status
                if 200 <= status < 300:
                    data = json.loads(req.text) if req.text else {}
                    resolve({"status": status, "body": data})
                else:
                    reject({"status": status, "text": req.text})
            except Exception as e:
                reject({"status": req.status, "error": str(e)})

        req.bind("complete", on_complete)
        req.send(json.dumps(body or {}))

    return window.Promise.new(_send)


def refresh_access_token():
    def on_ok(res):
        body = res.get("body") or {}
        token = body.get("access_token")
        if token:
            set_token(token)
            return True
        return False

    return api_post_json("/auth/refresh", {}, with_credentials=True).then(
        lambda res: on_ok(res),
        lambda _err: False,
    )


def ensure_auth():
    path = window.location.pathname
    public_paths = {"/login", "/register"}
    if path in public_paths:
        return  ## public pages are visible without checks

    token = get_token()
    if not token:
        ## try to silent refresh; on fail -> go to login
        def after_refresh(ok):
            if not ok:
                window.location.replace("/login")

        refresh_access_token().then(after_refresh, lambda _e: window.location.replace("/login"))
        return

    ## validate current token quickly; 401 - try refresh; else go to login
    def on_me_ok(_res):
        ## OK (status 200) -> nothing to do
        return None

    def on_me_fail(err):
        status = err.get("status") if isinstance(err, dict) else None
        if status == 401:
            ## token expired -> refresh and stay on page if success, else login
            def after_refresh(ok):
                if not ok:
                    window.location.replace("/login")
            refresh_access_token().then(after_refresh, lambda _e: window.location.replace("/login"))
        else:
            ## forbidden or other -> login
            window.location.replace("/login")

    api_get_json("/auth/me", token=token).then(on_me_ok, on_me_fail)


try:
    if window.document.readyState == "loading":
        window.document.addEventListener("DOMContentLoaded", lambda ev: ensure_auth())
    else:
        ensure_auth()
except Exception:
    ensure_auth()

